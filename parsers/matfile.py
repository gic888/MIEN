#!/usr/bin/env python

## Copyright (C) 2005-2006 Graham I Cummins
## This program is free software; you can redistribute it and/or modify it under 
## the terms of the GNU General Public License as published by the Free Software 
## Foundation; either version 2 of the License, or (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful, but WITHOUT ANY 
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
## PARTICULAR PURPOSE. See the GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License along with 
## this program; if not, write to the Free Software Foundation, Inc., 59 Temple 
## Place, Suite 330, Boston, MA 02111-1307 USA
## 

import mien.nmpml.data as mdat
from mat2py import *

ArrayType = ndarray

def readmatfile(fname):
	'''Return a dictionary of name:array pairs representing the variables stored in the mat 7 format file at fname.'''
	f=file(fname, 'rb')
	return read(f)

def struct2data(name, st):
	#print name
	h={}
	kids=[]
	data=None
	node={'tag':"Data", 'attributes':{'Name':name}, 'elements':[], 'cdata':''}	
	if st.has_key('data'):
		data=st['data']
	else:
		node['attributes']['SampleType']='group'
	dc=mdat.Data(node)
	for k in st.keys():
		if k=='data':
			continue
		elif k=='fs':
			v=st[k]
			while type(v)==ArrayType:
				v=v[0]
			h["SamplesPerSecond"]=v
		elif k=='start':
			v=st[k]
			while type(v)==ArrayType:
				v=v[0]
			h["StartTime"]=v
		elif k in ['type', 'SampleType']:
			h['SampleType']=st[k]
		elif k.lower() == "labels":
			if type(st[k])==dict:
				print "this mat file has labels generated by a buggy previous version of mien. Ignoring them"
			else:
				h["Labels"] = st[k]
		else:
			if data==None and type(st[k])==ArrayType and any(array(st[k].shape)>1):
				print "This matlab struct doesn't look like a mien data object. guessing that element '%s' is the primary numerical data" % k
				data=st[k]
			else:	
				#print 'recurse', k
				mat2data(k, st[k], dc)
	if data!=None:
		if h.get('SamplesPerSecond') and not h.get('SampleType'):
			h['SampleType']='timeseries'
		dc.datinit(data, h)
	else:
		for k in h.keys():
			if dc.attrib(k)!=h[k]:
				dc.setAttrib(k, h[k])
	for k in kids:
		dc.newElement(k)
	return dc

def mat2data(name, val, cont=None):
	node={'tag':"Data", 'attributes':{'Name':name}, 'elements':[], 'cdata':''}
	dc=None
	if type(val)==list:
		node['attributes']['SampleType']='group'
		dc=mdat.Data(node)
		for i, q in enumerate(val):
			n="cell%i" % i
			ndc=mat2data(n, q, dc)
	elif type(val)==dict:
		dc=struct2data(name, val)
	elif type(val) in (str, unicode):
		if cont:
			cont.setAttrib(name, val)
		else:
			print "ignoring matlab string value '%s'" % (val,)
	elif val.shape==(1,1) and cont:
		cont.setAttrib(name, val[0,0])
	else:
		if len(val.shape)==2:
			node['attributes']['SampleType']='timeseries'
			node['attributes']['SamplesPerSecond']=1.0
		else:
			node['attributes']['SampleType']='locus'
		dc=mdat.Data(node)
		dc.data=val
	if cont and dc:
		cont.newElement(dc)
		return None
	else:
		return dc

def mienRead(f, **kwargs):
	objs=read(f)
	data=[]
	for o in objs.keys():
		data.append(mat2data(o, objs[o]))
	node={'tag':"Nmpml", 'attributes':{'Name':'0'}, 'elements':[], 'cdata':''}
	document = mdat.basic_tools.NmpmlObject(node)
	for d in data:
		if d:
			document.newElement(d)
	return document

def writematfile(fname, d):
	'''write a dictionary (d) of name:array pairs to a mat 7 format file named fname'''
	f=file(fname, 'wb')
	write(f, d)
	f.close()
	

def data2struct(data):
	struct=data.header()
	if struct.has_key('SamplesPerSecond'):
		struct['fs']=struct['SamplesPerSecond']
		del(struct['SamplesPerSecond'])
	for c in data.getElements('Data', depth=1):
		struct[c.name()]=data2struct(c)
	struct['data']=data.data
	fixValues(struct)
	return struct
	
def anat2struct(anat):
	struct={"anatomy":anat.__tag__}
	for k in anat.getInheritedAttributes().keys():
		struct[k] = anat.attrib(k, True)
	struct['points']=anat.getPoints()
	return struct

def mienWrite(fileobj, doc, **kwargs):
	dats=doc.getElements('Data', heads=True)
	md={}
	for d in dats:
		n=str(d.name())
		if not n[0].isalpha():
			n="py"+n
		md[str(d.name())]=data2struct(d)
	anat=doc.getElements(['Cell', 'Fiducial'], heads=True)
	for d in anat:
		n = str(d.name())
		if d.container.__tag__ == 'Group':
			cn = d.container.name()
			if not n.startswith(cn):
				n = cn+"_"+n
		if not n[0].isalpha():
			n="py"+n
		md[n]=anat2struct(d)
	write(fileobj, md)	


filetypes={}	
					
filetypes['Matlab v 7']={'notes':"Matlab R14. No sparse or object arrays.",
					'read':mienRead,
					'write':mienWrite,
					'data type':'any numerical, limited anatomical',
					'elements':['Data', 'Cell', 'Fiducial'],
					'extensions':['.mat']}

if __name__=='__main__':
	#from sys import argv
	#f=file(argv[1], 'rb')
	#o=mienRead(f)
	d={'pyarray1':arange(10), 'pa2':uniform(0,10, (20,3)), 'cell1':['foo', uniform(0,2, (2,2))], 'pystructurefoo':{'fs':2.3, 'subd':{'fs':30, 'data':uniform(0,4,(4,2))}, 'data':uniform(0,5, (12,4))}}
	d={'structo':{'data1':uniform(0,4,(4,2)),'data2':uniform(0,4,(4,2)) }}
	writematfile('mientest.mat', d)
	d2=readmatfile('mientest.mat')
	print d2
